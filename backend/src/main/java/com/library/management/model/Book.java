package com.library.management.model;

import java.time.LocalDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;

/**
 * Entity representing a book in the library management system.
 * 
 * This class defines the structure of a book with all its properties
 * and validation constraints. It uses JPA for persistence and includes
 * validation annotations to ensure data integrity.
 * 
 * The entity is mapped to the "books" table in the database and includes
 * automatic timestamps for tracking modifications.
 * 
 * @author Library Management System
 * @version 1.0
 * @since 1.0
 */
@Entity
@Table(name = "books")
public class Book {
    
    /**
     * Unique identifier of the book.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * Title of the book.
     * Required field with validation.
     */
    @NotBlank(message = "Title is required")
    @Column(nullable = false)
    private String title;
    
    /**
     * Author of the book.
     * Required field with validation.
     */
    @NotBlank(message = "Author is required")
    @Column(nullable = false)
    private String author;
    
    /**
     * Detailed description of the book.
     * Optional field with character limit.
     */
    @Column(length = 1000)
    private String description;
    
    /**
     * Publication year of the book.
     * Must be greater than 1000 to be valid.
     */
    @NotNull(message = "Publication year is required")
    @Min(value = 1000, message = "Year must be greater than 1000")
    private Integer publicationYear;
    
    /**
     * ISBN number of the book.
     * Required field for unique identification.
     */
    @Column(nullable = false)
    private String isbn;
    
    /**
     * Current status of the book in the library.
     * By default, a book is available.
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private BookStatus status = BookStatus.AVAILABLE;
    
    /**
     * Date and time of record creation.
     * Automatically filled during persistence.
     */
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    /**
     * Date and time of last modification.
     * Automatically updated on each modification.
     */
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    /**
     * JPA callback executed before persisting a new entity.
     * Initializes creation and modification timestamps.
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }
    
    /**
     * JPA callback executed before updating an entity.
     * Updates the modification timestamp.
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
    
    /**
     * Default constructor required by JPA.
     */
    public Book() {}
    
    /**
     * Constructor with parameters to create a new book.
     * 
     * @param title The book title
     * @param author The book author
     * @param description The book description
     * @param publicationYear The publication year
     * @param isbn The book ISBN number
     */
    public Book(String title, String author, String description, Integer publicationYear, String isbn) {
        this.title = title;
        this.author = author;
        this.description = description;
        this.publicationYear = publicationYear;
        this.isbn = isbn;
    }
    
    // ==================== GETTERS AND SETTERS ====================
    
    /**
     * Gets the unique identifier of the book.
     * 
     * @return The book identifier
     */
    public Long getId() {
        return id;
    }
    
    /**
     * Sets the unique identifier of the book.
     * 
     * @param id The book identifier
     */
    public void setId(Long id) {
        this.id = id;
    }
    
    /**
     * Gets the book title.
     * 
     * @return The book title
     */
    public String getTitle() {
        return title;
    }
    
    /**
     * Sets the book title.
     * 
     * @param title The book title
     */
    public void setTitle(String title) {
        this.title = title;
    }
    
    /**
     * Gets the book author.
     * 
     * @return The book author
     */
    public String getAuthor() {
        return author;
    }
    
    /**
     * Sets the book author.
     * 
     * @param author The book author
     */
    public void setAuthor(String author) {
        this.author = author;
    }
    
    /**
     * Gets the book description.
     * 
     * @return The book description
     */
    public String getDescription() {
        return description;
    }
    
    /**
     * Sets the book description.
     * 
     * @param description The book description
     */
    public void setDescription(String description) {
        this.description = description;
    }
    
    /**
     * Gets the book publication year.
     * 
     * @return The publication year
     */
    public Integer getPublicationYear() {
        return publicationYear;
    }
    
    /**
     * Sets the book publication year.
     * 
     * @param publicationYear The publication year
     */
    public void setPublicationYear(Integer publicationYear) {
        this.publicationYear = publicationYear;
    }
    
    /**
     * Gets the book ISBN number.
     * 
     * @return The ISBN number
     */
    public String getIsbn() {
        return isbn;
    }
    
    /**
     * Sets the book ISBN number.
     * 
     * @param isbn The ISBN number
     */
    public void setIsbn(String isbn) {
        this.isbn = isbn;
    }
    
    /**
     * Gets the current book status.
     * 
     * @return The book status
     */
    public BookStatus getStatus() {
        return status;
    }
    
    /**
     * Sets the book status.
     * 
     * @param status The book status
     */
    public void setStatus(BookStatus status) {
        this.status = status;
    }
    
    /**
     * Gets the creation date and time.
     * 
     * @return The creation date
     */
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    /**
     * Sets the creation date and time.
     * 
     * @param createdAt The creation date
     */
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
    
    /**
     * Gets the last modification date and time.
     * 
     * @return The modification date
     */
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    /**
     * Sets the last modification date and time.
     * 
     * @param updatedAt The modification date
     */
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}
